/**
 * main_stream.cpp
 * K·∫øt h·ª£p: Khung Streaming (STM32 example) + logic ESP32 (SMS, LED, x·ª≠ l√Ω JSON)
 *
 * L∆∞u √Ω: c·∫ßn file ExampleFunctions.h (helper c·ªßa FirebaseClient example)
 */

#define ENABLE_USER_AUTH
#define ENABLE_DATABASE

#include <Arduino.h>
#include <WiFi.h>
#include <FirebaseClient.h>
#include <ArduinoJson.h>
#include <HardwareSerial.h>
#include "ExampleFunctions.h"    // B·∫Øt bu·ªôc: set_ssl_client_insecure_and_buffer, getAuth, auth_debug_print...

// === C·∫•u h√¨nh Wi-Fi / Firebase / SIM ===
#define WIFI_SSID "HOANG WIFI"
#define WIFI_PASSWORD "hhhhhhhh"

#define Web_API_KEY "Key"
#define DATABASE_URL "https://user.asia-southeast1.firebasedatabase.app/"
#define USER_EMAIL "akaybs@gmail.com"
#define USER_PASS "123456"

#define LED_PIN 2

// SIM A800
HardwareSerial sim800(1);
#define SIM800_TX 17
#define SIM800_RX 16
#define SIM800_BAUD 115200
bool simReady = false;

// === Firebase / clients (the STM32 example style) ===
SSL_CLIENT ssl_client, stream_ssl_client;
using AsyncClient = AsyncClientClass;
AsyncClient aClient(ssl_client), streamClient(stream_ssl_client);

UserAuth user_auth(Web_API_KEY, USER_EMAIL, USER_PASS, 3000);
FirebaseApp app;
RealtimeDatabase Database;

// Bi·∫øn l∆∞u k·∫øt qu·∫£ stream (d√πng nh∆∞ v√≠ d·ª•)
AsyncResult streamResult;

// LED status
unsigned long lastBlinkTime = 0;
bool ledState = false;
int ledMode = 0; // 1 wifi err, 2 firebase err, 3 sim err, 4 ok

// ==================== H√ÄM TI·ªÜN √çCH ====================
String removeVietnameseAccents(String str) {
  const char *find[] = {"√°","√†","·∫£","√£","·∫°","ƒÉ","·∫Ø","·∫±","·∫≥","·∫µ","·∫∑","√¢","·∫•","·∫ß","·∫©","·∫´","·∫≠",
                        "ƒë",
                        "√©","√®","·∫ª","·∫Ω","·∫π","√™","·∫ø","·ªÅ","·ªÉ","·ªÖ","·ªá",
                        "√≠","√¨","·ªâ","ƒ©","·ªã",
                        "√≥","√≤","·ªè","√µ","·ªç","√¥","·ªë","·ªì","·ªï","·ªó","·ªô","∆°","·ªõ","·ªù","·ªü","·ª°","·ª£",
                        "√∫","√π","·ªß","≈©","·ª•","∆∞","·ª©","·ª´","·ª≠","·ªØ","·ª±",
                        "√Ω","·ª≥","·ª∑","·ªπ","·ªµ",
                        "√Å","√Ä","·∫¢","√É","·∫†","ƒÇ","·∫Æ","·∫∞","·∫≤","·∫¥","·∫∂","√Ç","·∫§","·∫¶","·∫®","·∫™","·∫¨",
                        "ƒê",
                        "√â","√à","·∫∫","·∫º","·∫∏","√ä","·∫æ","·ªÄ","·ªÇ","·ªÑ","·ªÜ",
                        "√ç","√å","·ªà","ƒ®","·ªä",
                        "√ì","√í","·ªé","√ï","·ªå","√î","·ªê","·ªí","·ªî","·ªñ","·ªò","∆†","·ªö","·ªú","·ªû","·ª†","·ª¢",
                        "√ö","√ô","·ª¶","≈®","·ª§","∆Ø","·ª®","·ª™","·ª¨","·ªÆ","·ª∞",
                        "√ù","·ª≤","·ª∂","·ª∏","·ª¥"};
  const char *repl[] = {"a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a","a",
                        "d",
                        "e","e","e","e","e","e","e","e","e","e","e",
                        "i","i","i","i","i",
                        "o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o","o",
                        "u","u","u","u","u","u","u","u","u","u","u",
                        "y","y","y","y","y",
                        "A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A",
                        "D",
                        "E","E","E","E","E","E","E","E","E","E","E",
                        "I","I","I","I","I",
                        "O","O","O","O","O","O","O","O","O","O","O","O","O","O","O","O","O",
                        "U","U","U","U","U","U","U","U","U","U","U",
                        "Y","Y","Y","Y","Y"};
  for (int i = 0; i < (int)(sizeof(find) / sizeof(find[0])); i++)
    str.replace(find[i], repl[i]);
  return str;
}

String formatMoney(long money) {
  String s = String(money);
  String res = "";
  int len = s.length();
  int count = 0;
  for (int i = len - 1; i >= 0; i--) {
    res = s.charAt(i) + res;
    count++;
    if (count == 3 && i != 0) {
      res = "." + res;
      count = 0;
    }
  }
  return res;
}

// LED update
void updateLed() {
  unsigned long now = millis();
  if (ledMode == 1) {
    if (now - lastBlinkTime > 1000) {
      lastBlinkTime = now;
      ledState = !ledState;
      digitalWrite(LED_PIN, ledState);
    }
  } else if (ledMode == 2) {
    if (now - lastBlinkTime > 250) {
      lastBlinkTime = now;
      ledState = !ledState;
      digitalWrite(LED_PIN, ledState);
    }
  } else if (ledMode == 3) {
    static int blinkCount = 0;
    static unsigned long patternTimer = 0;
    if (now - patternTimer > 200) {
      patternTimer = now;
      blinkCount++;
      digitalWrite(LED_PIN, blinkCount % 2);
      if (blinkCount >= 4) {
        blinkCount = 0;
        delay(1600);
      }
    }
  } else if (ledMode == 4) {
    digitalWrite(LED_PIN, LOW);
  }
}

// ==================== G·ª¨I SMS ====================
bool sendSMS(String phone, String content) {
  while (sim800.available()) sim800.read();

  sim800.println("AT+CMGF=1");
  delay(300);
  if (!sim800.find("OK")) Serial.println("‚ö†Ô∏è Kh√¥ng ph·∫£n h·ªìi CMGF");

  sim800.print("AT+CMGS=\"");
  sim800.print(phone);
  sim800.println("\"");
  delay(300);

  sim800.print(content);
  sim800.write(26); // Ctrl+Z

  String response = "";
  unsigned long start = millis();
  while (millis() - start < 8000) {
    while (sim800.available()) {
      char c = sim800.read();
      response += c;
    }
    if (response.indexOf("+CMGS:") != -1) {
      Serial.println("‚úÖ SMS g·ª≠i th√†nh c√¥ng");
      return true;
    }
    if (response.indexOf("ERROR") != -1) {
      Serial.println("‚ùå G·ª≠i th·∫•t b·∫°i");
      return false;
    }
  }
  Serial.println("‚ö†Ô∏è H·∫øt th·ªùi gian ch·ªù ph·∫£n h·ªìi");
  return false;
}

void updateSMSStatus(String id, String status) {
  String path = "/roitai/" + id + "/sms";
  Database.set<String>(aClient, path, status, [](AsyncResult &r) {
    if (r.isError())
      Serial.printf("‚ùå Update error: %s\n", r.error().message().c_str());
    else
      Serial.printf("‚úÖ Updated %s\n", r.c_str());
  });
}

// ==================== FIREBASE CALLBACK (Stream) ====================
void processData(AsyncResult &aResult) {
  if (!aResult.isResult())
    return;

  // üß≠ Log s·ª± ki·ªán Firebase
  if (aResult.isEvent()) {
    Serial.printf("[S·ª± ki·ªán] %s | M√£: %d\n",
                  aResult.eventLog().message().c_str(),
                  aResult.eventLog().code());
  }

  // ‚ö†Ô∏è Log l·ªói Firebase (n·∫øu c√≥)
  if (aResult.isError()) {
    Serial.printf("[L·ªói] %s | M√£: %d\n",
                  aResult.error().message().c_str(),
                  aResult.error().code());
    return;
  }

  // üì° Khi c√≥ d·ªØ li·ªáu t·ª´ Firebase stream
  if (aResult.available()) {
    RealtimeDatabaseResult &stream = aResult.to<RealtimeDatabaseResult>();

    if (stream.isStream()) {
      Serial.println("=== STREAM UPDATE ===");
      Serial.printf("S·ª± ki·ªán: %s\n", stream.event().c_str());
    
      Serial.printf("D·ªØ li·ªáu: %s\n", stream.to<const char*>());
     // Serial.println("=====================");
    }

    // ‚úÖ L·∫•y d·ªØ li·ªáu JSON h·ª£p l·ªá
    const char *payload = stream.to<const char*>();
    if (payload == nullptr || strlen(payload) == 0 || strcmp(payload, "null") == 0) {
      //Serial.println("‚ö†Ô∏è Kh√¥ng c√≥ JSON h·ª£p l·ªá ƒë·ªÉ x·ª≠ l√Ω.");
      return;
    }

    // ‚úÖ Log JSON nh·∫≠n ƒë∆∞·ª£c
   // Serial.print("üì¶ JSON: ");
   // Serial.println(payload);

    // ‚úÖ Parse JSON (ArduinoJson 7.4.2 ‚Äî t·ª± c·∫•p ph√°t b·ªô nh·ªõ)
    JsonDocument doc;
    DeserializationError err = deserializeJson(doc, payload);
    if (err) {
      Serial.print("‚ùå deserializeJson error: ");
      Serial.println(err.c_str());
      return;
    }

    JsonObject root = doc.as<JsonObject>();

    // ‚úÖ L·∫∑p qua t·ª´ng ph·∫ßn t·ª≠ trong JSON
    for (JsonPair kv : root) {
      JsonObject item = kv.value().as<JsonObject>();
      String id = String(kv.key().c_str());
      String name = item["name"] | "";
      String phone = item["phone"] | "";
      String iphone = item["iphone"] | "";
      String imei = item["imei"] | "";
      String loi = item["loi"] | "";
      String thanhtoan = item["thanhtoan"] | "";
      String smsStatus = item["sms"] | "";
      String thoigian = item["thoigian"] | "";
      String tienText = item["tienText"] | "";
      int soLuongNo = item["soLuongNo"] | 0;
      long totalDebtVal = item["totalDebt"] | 0;

      // Chu·∫©n h√≥a k√Ω hi·ªáu ti·ªÅn
      tienText.replace("‚Ç´", "VND");
      tienText.replace("ƒë", "VND");
      loi.replace("‚Ç´", "VND");
      loi.replace("ƒë", "VND");

      // ‚úÖ T·∫°o n·ªôi dung SMS theo tr·∫°ng th√°i
      String smsContent = "";
      if (smsStatus == "Send" && thanhtoan == "TT") {
        smsContent = "TB: " + name + "\nBan da " + loi + "\nTime: " + thoigian + "\nhttps://hoanglsls.web.app";
      } else if (thanhtoan == "Ok" && smsStatus == "Yes") {
        smsContent = "TB:" + id + " " + name + "\nTHANH TOAN OK\n" + iphone +
                     "\nImei: " + imei + "\nLoi: " + loi + "\nTien: " + tienText +
                     "\n" + thoigian + "\n";
        if (soLuongNo >= 1 && totalDebtVal > 0)
          smsContent += "Tong no (" + String(soLuongNo) + " may): " +
                        formatMoney(totalDebtVal) + " VND\n";
      } else if (thanhtoan == "N·ª£" && smsStatus == "Yes") {
        smsContent = "ID:" + id + " " + name + "\nCHUA THANH TOAN\n" + iphone +
                     "\nImei: " + imei + "\nLoi: " + loi + "\nTien: " + tienText +
                     "\n" + thoigian + "\n";
        if (soLuongNo >= 1 && totalDebtVal > 0)
          smsContent += "Tong no (" + String(soLuongNo) + " may): " +
                        formatMoney(totalDebtVal) + " VND\n";
      } else if (thanhtoan == "Back" && smsStatus == "Yes") {
        smsContent = "TB:" + id + " " + name + "\nHOAN TIEN\n" + iphone +
                     "\nImei: " + imei + "\nLoi: " + loi + "\nTien: " + tienText +
                     "\n" + thoigian + "\n";
        if (soLuongNo >= 1 && totalDebtVal > 0)
          smsContent += "Tong no (" + String(soLuongNo) + " may): " +
                        formatMoney(totalDebtVal) + " VND\n";
      }

      // ‚úÖ G·ª≠i SMS n·∫øu c√≥ n·ªôi dung
      if (smsContent.length() > 0) {
        // Hi·ªÉn th·ªã tr∆∞·ªõc tin nh·∫Øn s·∫Ω g·ª≠i
        Serial.println("üü¶ [XEM TR∆Ø·ªöC TIN NH·∫ÆN SMS]");
        Serial.printf("‚Üí Ng∆∞·ªùi nh·∫≠n: %s\n", phone.c_str());
        //Serial.println("‚Üí N·ªôi dung:");
        Serial.println(smsContent);
        Serial.println("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");

        smsContent = removeVietnameseAccents(smsContent);
        int pos = smsContent.indexOf("Tong no");
        String smsMain = smsContent;
        String smsDebt = "";
        if (pos != -1 && smsContent.length() > 160) {
          smsMain = smsContent.substring(0, pos);
          smsDebt = smsContent.substring(pos);
        }

        bool ok1 = sendSMS(phone, smsMain);
        updateSMSStatus(id, ok1 ? "Done" : "Error");

        if (smsDebt.length() > 0) {
          delay(3000);
          bool ok2 = sendSMS(phone, smsDebt);
          (void)ok2;
        }

        Serial.printf("üì§ SMS sent (stream): ID=%s | phone=%s | status=%s\n",
                      id.c_str(), phone.c_str(), ok1 ? "‚úÖ OK" : "‚ùå FAIL");
      }
    }
  }
}


// ==================== SETUP ====================
bool checkSimModule() {
  sim800.println("AT");
  unsigned long t = millis();
  while (millis() - t < 1000) {
    if (sim800.find("OK")) return true;
  }
  return false;
}

void setup() {
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);
  Serial.begin(115200);
  sim800.begin(SIM800_BAUD, SERIAL_8N1, SIM800_RX, SIM800_TX);
  Serial.println("üîπ SIM A800 initializing...");

  // K·∫øt n·ªëi WiFi
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("ƒêang k·∫øt n·ªëi WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    ledMode = 1;
    updateLed();
    delay(300);
  }
  Serial.println();
  Serial.print("ƒê√£ k·∫øt n·ªëi, IP: ");
  Serial.println(WiFi.localIP());

  simReady = checkSimModule();
  Serial.println(simReady ? "‚úÖ SIM A800 OK" : "‚ùå SIM A800 ERROR");

  // === Kh·ªüi t·∫°o Firebase (the STM32 example style) ===
  Firebase.printf("Firebase Client v%s\n", FIREBASE_CLIENT_VERSION);

  // Thi·∫øt l·∫≠p ssl client + b·ªô ƒë·ªám ph√π h·ª£p
  set_ssl_client_insecure_and_buffer(ssl_client);
  set_ssl_client_insecure_and_buffer(stream_ssl_client);

  Serial.println("ƒêang kh·ªüi t·∫°o FirebaseApp...");
  initializeApp(aClient, app, getAuth(user_auth), auth_debug_print, "authTask");

  app.getApp<RealtimeDatabase>(Database);
  Database.url(DATABASE_URL);

  // C·∫•u h√¨nh streamClient ch·ªâ nghe c√°c s·ª± ki·ªán c·∫ßn thi·∫øt
  streamClient.setSSEFilters("put,patch,get,auth_revoked");

  Serial.println("üì° ƒêang l·∫•y to√†n b·ªô d·ªØ li·ªáu /roitai ...");

  // L·∫•y to√†n b·ªô JSON t·∫°i /roitai (l·∫ßn ƒë·∫ßu) ‚Äî callback s·∫Ω x·ª≠ l√Ω
  Database.get(aClient, "/roitai", processData, "getAllData");

  Serial.println("ƒêang nghe d·ªØ li·ªáu t·ª´ Firebase...");
  // L∆∞u √Ω: theo v√≠ d·ª• STM32, vi·ªác x·ª≠ l√Ω stream x·∫£y ra trong loop() qua processData(streamResult)
}

// ==================== LOOP ====================
void loop() {
  // V√≤ng l·∫∑p ch√≠nh ph·∫£i g·ªçi app.loop() ƒë·ªÉ duy tr√¨ k·∫øt n·ªëi v√† x√°c th·ª±c
  app.loop();

  // C·∫≠p nh·∫≠t LED
  updateLed();

  // Ch·∫ø ƒë·ªô LED theo tr·∫°ng th√°i
  if (WiFi.status() != WL_CONNECTED)
    ledMode = 1;
  else if (!app.ready())
    ledMode = 2;
  else if (!simReady)
    ledMode = 3;
  else
    ledMode = 4;

  // X·ª≠ l√Ω d·ªØ li·ªáu stream (d·ªØ li·ªáu m·ªõi s·∫Ω l√†m streamResult c√≥ s·∫µn v√† g·ªçi processData)
  processData(streamResult);

  // Th√™m 1 delay nh·ªè ƒë·ªÉ tr√°nh v√≤ng loop qu√° nhanh (t√πy c·∫•u h√¨nh)
  delay(5);
}
